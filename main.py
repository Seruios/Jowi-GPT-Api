import psycopg2
import openai
import json
from fastapi import FastAPI, Header, HTTPException, Body
from pydantic import BaseModel
from typing import List, Dict, Optional
from config import api_key, db_credentials

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ openai
client = openai.OpenAI(api_key=api_key)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
DB_CONFIG = db_credentials

def execute_sql(query: str):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL.
    """
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()
        cur.execute(query)
        results = cur.fetchall()
        cur.close()
        conn.close()
        return results
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ SQL: {e}"

def chat_gpt_with_sql(question: str, extra_context: Optional[List[Dict[str, str]]] = None) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å:
    1. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ GPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞.
    2. –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ.
    3. –ü–µ—Ä–µ–¥–∞—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ GPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
    –ü–∞—Ä–∞–º–µ—Ç—Ä extra_context –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –≤–∏–¥–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å
    sql_response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "system", 
                "content": (
                    "–¢—ã AI, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç—Ä–æ–∏—Ç SQL-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö postgresql. "
                    "–¢—ã —Å—Ç–∞—Ä–∞–µ—à—å—Å—è —Ä–∞–∑–±–∏—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –∏ –∏—â–µ—à—å –ø–æ –Ω–µ–º—É. "
                    "–ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ '–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –±–ª—é–¥–æ', —Ç—ã –∏—â–µ—à—å –ø–æ —Å–ª–æ–≤—É '–±–ª—é–¥–æ'."
                )
            },
            {
                "role": "user", 
                "content": (
                    "–í–æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n"
                    "–¢–∞–±–ª–∏—Ü–∞: public.materials_material\n"
                    " - content (TEXT) - —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML\n\n"
                    f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}\n"
                    "–†–∞–∑–±–µ–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ –∏ —Å—Ñ–æ—Ä–º–∏—Ä—É–π —Ç–æ–ª—å–∫–æ SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –±–µ–∑ "
                    "```sql"
                )
            }
        ]
    )
    
    sql_query = sql_response.choices[0].message.content.strip()
    print(f"üõ† GPT —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª SQL-–∑–∞–ø—Ä–æ—Å:\n{sql_query}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å
    db_results = execute_sql(sql_query)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã SQL-–∑–∞–ø—Ä–æ—Å–∞: {db_results}")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ GPT —Å sql –∑–∞–ø—Ä–æ—Å–æ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–Ω–µ–µ
    messages = [
        {
            "role": "system", 
            "content": (
                "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã. "
                "–ï—Å–ª–∏ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏, —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç—å –æ—Ç–≤–µ—Ç, –ø–∏—à–∏, —á—Ç–æ –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç."
            )
        }
    ]
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if extra_context:
        messages.extend(extra_context)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ sql –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
    messages.append({
        "role": "assistant",
        "content": f"–í–æ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã: {db_results}"
    })
    messages.append({
        "role": "user",
        "content": f"–í–æ–ø—Ä–æ—Å: {question}\n–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
    })
    
    final_response = client.chat.completions.create(
        model="gpt-4o",
        messages=messages
    )
    
    return final_response.choices[0].message.content

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ FastAPI
app = FastAPI(
    title="Jowi ChatSQL API",
    description="API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –æ—Ç–≤–µ—Ç–æ–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GPT –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Jowi, PostgreSQL.",
    version="1.0.0"
)

class ChatRequest(BaseModel):
    question: str
    context: Optional[List[Dict[str, str]]] = None

class ChatResponse(BaseModel):
    answer: str

@app.post("/ask", response_model=ChatResponse, summary="–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å",
          description=(
              "–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π), "
              "–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ AuthRestaurantId –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
          ))
def ask(
    payload: ChatRequest,
    authrestaurantid: str = Header(..., description="–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API")
):
    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é)
    if not authrestaurantid:
        raise HTTPException(status_code=401, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç AuthRestaurantId")
    
    try:
        answer = chat_gpt_with_sql(payload.question, payload.context)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    
    return ChatResponse(answer=answer)

# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–∞–Ω–¥–æ–π uvicorn main:app --reload)
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)
